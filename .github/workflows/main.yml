# ------------------------------------------------------------------
#  GitHub Actions – RDP + Tailscale quick-access runner
# ------------------------------------------------------------------
name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600          # 60 h max (limite GH = 6 h/job)

    steps:
      # --------------------------------------------------------------
      # 1. Configure le service Bureau à distance
      # --------------------------------------------------------------
      - name: Configure core RDP settings
        shell: pwsh
        run: |
          # Active RDP et désactive NLA (utile pour connexion via Tailscale)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Supprime/ré-ouvre le port 3389 dans le firewall
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
                                             dir=in action=allow protocol=TCP localport=3389

          # Redémarre le service Terminal Server
          Restart-Service -Name TermService -Force

      # --------------------------------------------------------------
      # 2. Crée un compte « RDP » avec mot de passe aléatoire
      # --------------------------------------------------------------
      - name: Create RDP user with secure password
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security

          $charSet = @{
              Upper  = [char[]](65..90)            # A-Z
              Lower  = [char[]](97..122)           # a-z
              Number = [char[]](48..57)            # 0-9
              Special= ([char[]](33..47) +
                        [char[]](58..64) +
                        [char[]](91..96) +
                        [char[]](123..126))
          }

          $rawPwd = @()
          $rawPwd += $charSet.Upper  | Get-Random -Count 4
          $rawPwd += $charSet.Lower  | Get-Random -Count 4
          $rawPwd += $charSet.Number | Get-Random -Count 4
          $rawPwd += $charSet.Special| Get-Random -Count 4

          $password = -join ($rawPwd | Sort-Object { Get-Random })
          $secPwd   = ConvertTo-SecureString $password -AsPlainText -Force

          New-LocalUser -Name "RDP" -Password $secPwd -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          # Rend les identifiants visibles dans l’UI GitHub
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

          # Vérifie que le compte a bien été créé
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      # --------------------------------------------------------------
      # 3. Installe Tailscale (version stable)
      # --------------------------------------------------------------
      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl  = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $outMsi = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $outMsi
          Start-Process msiexec.exe -Wait -ArgumentList "/i", "`"$outMsi`"", "/quiet", "/norestart"
          Remove-Item $outMsi -Force

      # --------------------------------------------------------------
      # 4. Connecte la machine au réseau Tailscale
      # --------------------------------------------------------------
      - name: Establish Tailscale connection
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ tskey-auth-kxq7uLAZJc11CNTRL-bN7kBUK9ae4dJ85r2YRFe4BSpy55TPx8 }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="$env:TAILSCALE_AUTH_KEY" `
                                                            --hostname="gh-runner-${{ github.run_id }}"

          # Attend qu’une IP Tailscale soit attribuée (max 50 s)
          $tsIP = $null
          for ($i = 0; $i -lt 10; $i++) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      # --------------------------------------------------------------
      # 5. Vérifie que le port 3389 est joignable depuis l’extérieur
      # --------------------------------------------------------------
      - name: Verify RDP accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      # --------------------------------------------------------------
      # 6. Maintient le runner actif (jusqu’à annulation manuelle)
      # --------------------------------------------------------------
      - name: Maintain connection
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(($env:RDP_CREDS -split 'Password: ')[1])"
          Write-Host "=================="
          Write-Host ""

          # Boucle infinie (Ctrl+C dans l’UI GitHub pour stopper)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active – Ctrl+C in Actions UI to terminate"
              Start-Sleep -Seconds 300
          }
