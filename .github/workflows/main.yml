name: RDP
on:
workflow_dispatch:
jobs:
secure-rdp:
runs-on: windows-latest
timeout-minutes: 3600
steps:
- name: Configure Core RDP Settings
run: |
# Enable Remote Desktop and disable Network Level Authentication (if needed)
Set-ItemProperty -Path &#39;HKLM:\System\CurrentControlSet\Control\Terminal Server&#39; `
-Name &quot;fDenyTSConnections&quot; -Value 0 -Force
Set-ItemProperty -Path &#39;HKLM:\System\CurrentControlSet\Control\Terminal
Server\WinStations\RDP-Tcp&#39; `
-Name &quot;UserAuthentication&quot; -Value 0 -Force
Set-ItemProperty -Path &#39;HKLM:\System\CurrentControlSet\Control\Terminal
Server\WinStations\RDP-Tcp&#39; `
-Name &quot;SecurityLayer&quot; -Value 0 -Force
# Remove any existing rule with the same name to avoid duplication
netsh advfirewall firewall delete rule name=&quot;RDP-Tailscale&quot;
# For testing, allow any incoming connection on port 3389
netsh advfirewall firewall add rule name=&quot;RDP-Tailscale&quot; `
dir=in action=allow protocol=TCP localport=3389
# (Optional) Restart the Remote Desktop service to ensure changes take effect
Restart-Service -Name TermService -Force
- name: Create RDP User with Secure Password
run: |
Add-Type -AssemblyName System.Security
$charSet = @{
Upper = [char[]](65..90) # A-Z
Lower = [char[]](97..122) # a-z
Number = [char[]](48..57) # 0-9
Special = ([char[]](33..47) + [char[]](58..64) +
[char[]](91..96) + [char[]](123..126)) # Special characters
}
$rawPassword = @()

$rawPassword += $charSet.Upper | Get-Random -Count 4
$rawPassword += $charSet.Lower | Get-Random -Count 4
$rawPassword += $charSet.Number | Get-Random -Count 4
$rawPassword += $charSet.Special | Get-Random -Count 4
$password = -join ($rawPassword | Sort-Object { Get-Random })
$securePass = ConvertTo-SecureString $password -AsPlainText -Force
New-LocalUser -Name &quot;RDP&quot; -Password $securePass -AccountNeverExpires
Add-LocalGroupMember -Group &quot;Administrators&quot; -Member &quot;RDP&quot;
Add-LocalGroupMember -Group &quot;Remote Desktop Users&quot; -Member &quot;RDP&quot;
echo &quot;RDP_CREDS=User: RDP | Password: $password&quot; &gt;&gt; $env:GITHUB_ENV
if (-not (Get-LocalUser -Name &quot;RDP&quot;)) {
Write-Error &quot;User creation failed&quot;
exit 1
}
- name: Install Tailscale
run: |
$tsUrl = &quot;https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi&quot;
$installerPath = &quot;$env:TEMP\tailscale.msi&quot;
Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
Start-Process msiexec.exe -ArgumentList &quot;/i&quot;, &quot;`&quot;$installerPath`&quot;&quot;, &quot;/quiet&quot;, &quot;/norestart&quot; -
Wait
Remove-Item $installerPath -Force
- name: Establish Tailscale Connection
run: |
# Bring up Tailscale with the provided auth key and set a unique hostname
&amp; &quot;$env:ProgramFiles\Tailscale\tailscale.exe&quot; up --authkey=${{
secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
# Wait for Tailscale to assign an IP
$tsIP = $null
$retries = 0
while (-not $tsIP -and $retries -lt 10) {
$tsIP = &amp; &quot;$env:ProgramFiles\Tailscale\tailscale.exe&quot; ip -4
Start-Sleep -Seconds 5
$retries++
}
if (-not $tsIP) {
Write-Error &quot;Tailscale IP not assigned. Exiting.&quot;

exit 1
}
echo &quot;TAILSCALE_IP=$tsIP&quot; &gt;&gt; $env:GITHUB_ENV
- name: Verify RDP Accessibility
run: |
Write-Host &quot;Tailscale IP: $env:TAILSCALE_IP&quot;
# Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
$testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
if (-not $testResult.TcpTestSucceeded) {
Write-Error &quot;TCP connection to RDP port 3389 failed&quot;
exit 1
}
Write-Host &quot;TCP connectivity successful!&quot;
- name: Maintain Connection
run: |
Write-Host &quot;`n=== RDP ACCESS ===&quot;
Write-Host &quot;Address: $env:TAILSCALE_IP&quot;
Write-Host &quot;Username: RDP&quot;
Write-Host &quot;Password: $(echo $env:RDP_CREDS)&quot;
Write-Host &quot;==================`n&quot;
# Keep runner active indefinitely (or until manually cancelled)
while ($true) {
Write-Host &quot;[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate&quot;
Start-Sleep -Seconds 300
}
